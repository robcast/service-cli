name: Docker Build and Push

on:
  schedule:
    - cron: '0 10 * * 0' # everyday sunday at 10am
  push:
    branches:
      - master
      - develop
      - feature/*
    tags:
      - 'v*.*.*'

defaults:
  run:
    shell: bash

env:
  IMAGE: docksal/cli
  UPSTREAM_IMAGE: debian
  LATEST_VERSION: 7.3
  DOCKSAL_VERSION: develop

jobs:
  build-test:
    name: ${{ matrix.version }} build for ${{ matrix.platform }}
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        include:
          -
            platform: linux/amd64
            arch: amd64
            version: 7.3
          -
            platform: linux/amd64
            arch: amd64
            version: 7.4
          -
            platform: linux/arm64
            arch: arm64
            version: 7.3
          -
            platform: linux/arm64
            arch: arm64
            version: 7.4

    env:
      ARCH: ${{ matrix.arch }}
      VERSION: ${{ matrix.version }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Environment variables
        run: |
          BUILD_TAG=php${{ env.VERSION }}-${{ env.ARCH }}-build
          BUILD_IMAGE_TAG=${{ env.IMAGE }}:${BUILD_TAG}
          CACHE_IMAGE_TAG=ghcr.io/${BUILD_IMAGE_TAG}
          echo "GIT_SHORT_SHA=${GITHUB_SHA:1:7}" >> $GITHUB_ENV
          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_ENV
          echo "BUILD_IMAGE_TAG=${BUILD_IMAGE_TAG}" >> $GITHUB_ENV
          echo "CACHE_IMAGE_TAG=${CACHE_IMAGE_TAG}" >> $GITHUB_ENV
      -
        name: Install prerequisites for tests
        run: |
          set -xeuo pipefail
          sudo apt-get -qq update
          # Install cgi-fcgi binary used in tests
          sudo apt-get -y --no-install-recommends install libfcgi-bin
          # Install bats for tests
          git clone https://github.com/bats-core/bats-core.git
          cd bats-core
          sudo ./install.sh /usr/local
          bats -v
#      -
#        name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1

      # Switch docker context to a remote arm64 host
      -
        name: Switch to arm64 builder host
        if: ${{ env.ARCH == 'arm64' }}
        uses: arwynfr/actions-docker-context@98fc92878d0b856c1112c79b8d0f45353206e186
        with:
          docker_host: "ssh://ubuntu@${{ secrets.ARM64_HOST }}"
          context_name: arm64-host
          ssh_key: "${{ secrets.ARM64_HOST_SSH_KEY }}"
          ssh_cert: "${{ secrets.ARM64_HOST_SSH_CERT }}"
          use_context: true
      -
        name: Check Docker
        run: |
          docker version
          docker info
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      -
        # Build for local use
        name: Build image (local)
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.VERSION }}
          file: ${{ env.VERSION }}/Dockerfile
          build-args: |
            UPSTREAM_IMAGE=${{ env.UPSTREAM_IMAGE }}
            VERSION=${{ env.VERSION }}
          #platforms: linux/amd64 # Note: cannot use multi-platform with local image caching ("load: true")
          tags: ${{ env.BUILD_IMAGE_TAG }} # Tag used locally in tests
          load: true # cache image locally for use by other steps
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE_TAG }}
          cache-to: type=inline # Write the cache metadata into the image configuration
#      -
#        # Build for local use
#        name: Build image (amd64)
#        id: docker_build_amd64
#        uses: docker/build-push-action@v2
#        env:
#          BUILD_IMAGE_TAG: ${{ env.IMAGE }}:php${{ env.VERSION }}-amd64-build
#        with:
#          context: ${{ env.VERSION }}
#          file: ${{ env.VERSION }}/Dockerfile
#          build-args: |
#            UPSTREAM_IMAGE=${{ env.UPSTREAM_IMAGE }}
#            VERSION=${{ env.VERSION }}
#          #platforms: linux/amd64 # Note: cannot use multi-platform with local image caching ("load: true")
#          tags: ${{ env.BUILD_IMAGE_TAG }} # Tag used locally in tests
#          load: true # cache image locally for use by other steps
#          cache-from: type=registry,ref=ghcr.io/${{ env.BUILD_IMAGE_TAG }}
#          cache-to: type=inline # Write the cache metadata into the image configuration
#      -
#        # Build for local use
#        name: Build image (arm64)
#        id: docker_build_arm64
#        uses: docker/build-push-action@v2
#        env:
#          BUILD_IMAGE_TAG: ${{ env.IMAGE }}:php${{ env.VERSION }}-arm64-build
#        with:
#          context: ${{ env.VERSION }}
#          file: ${{ env.VERSION }}/Dockerfile
#          build-args: |
#            UPSTREAM_IMAGE=${{ env.UPSTREAM_IMAGE }}
#            VERSION=${{ env.VERSION }}
#          #platforms: linux/arm64 # Note: cannot use multi-platform with local image caching ("load: true")
#          tags: ${{ env.BUILD_IMAGE_TAG }} # Tag used locally in tests
#          load: true # cache image locally for use by other steps
#          cache-from: type=registry,ref=ghcr.io/${{ env.BUILD_IMAGE_TAG }}
#          cache-to: type=inline # Write the cache metadata into the image configuration
      -
        # Print image info
        name: Docker image info
        run: |
          set -xeuo pipefail
          docker image ls | grep "${{ env.IMAGE }}"
          docker image inspect "${{ env.BUILD_IMAGE_TAG }}"
      -
        # Cache image layers in the registry
        name: Push image cache
        id: docker_push_cache
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.VERSION }}
          file: ${{ env.VERSION }}/Dockerfile
          build-args: |
            VERSION=${{ env.VERSION }}
          #platforms: linux/amd64,linux/arm64 # Cache image is multi-arch
          tags: |
            ${{ env.CACHE_IMAGE_TAG }}
            ${{ env.CACHE_IMAGE_TAG }}-${{ env.GIT_SHORT_SHA }}
            ${{ env.BUILD_IMAGE_TAG }}-${{ env.GIT_SHORT_SHA }}
          push: ${{ github.event_name != 'pull_request' }} # Don't push for PRs
          cache-to: type=inline # Write the cache metadata into the image configuration
      -
        # Run tests
        name: Test
        working-directory: ${{ env.VERSION }}
        env:
          SECRET_PLATFORMSH_CLI_TOKEN: ${{ secrets.SECRET_PLATFORMSH_CLI_TOKEN }}
          SECRET_TERMINUS_TOKEN: ${{ secrets.SECRET_TERMINUS_TOKEN }}
        run: make test

  push:
    name: Push images to registry
    runs-on: ubuntu-20.04
    needs: build-test

    strategy:
      matrix:
        version:
          - 7.3
          - 7.4
    env:
      VERSION: ${{ matrix.version }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Environment variables
        run: |
          echo "GIT_SHORT_SHA=${GITHUB_SHA:1:7}" >> $GITHUB_ENV
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
#      -
#        # Generate final image tags
#        name: Docker image tags
#        id: docker_tags
#        working-directory: ${{ env.VERSION }}
#        run: make tags
      -
        # Push final image manifest to the registry
        name: Push ${{ env.VERSION }} manifest
        #if: ${{ steps.docker_tags.outputs.tags != '' }}
        run: |
          set -xeuo pipefail
          IMAGE_TAG_BASE=${{ env.IMAGE }}:php${{ env.VERSION }}
          TAG_SUFFIX=build-${{ env.GIT_SHORT_SHA }}
          # Docker Hub
          docker --debug manifest create ${IMAGE_TAG_BASE}-${TAG_SUFFIX} \
            --amend ${IMAGE_TAG_BASE}-amd64-${TAG_SUFFIX} \
            --amend ${IMAGE_TAG_BASE}-arm64-${TAG_SUFFIX}
          docker --debug manifest inspect ${IMAGE_TAG_BASE}-${TAG_SUFFIX}
          docker --debug manifest push ${IMAGE_TAG_BASE}-${TAG_SUFFIX}
          # GitHub CR
          docker --debug manifest create ghcr.io/${IMAGE_TAG_BASE}-${TAG_SUFFIX} \
            --amend ghcr.io/${IMAGE_TAG_BASE}-amd64-${TAG_SUFFIX} \
            --amend ghcr.io/${IMAGE_TAG_BASE}-arm64-${TAG_SUFFIX}
          docker --debug manifest inspect ghcr.io/${IMAGE_TAG_BASE}-${TAG_SUFFIX}
          docker --debug manifest push ghcr.io/${IMAGE_TAG_BASE}-${TAG_SUFFIX}
